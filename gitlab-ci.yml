stages:
  - monitor

variables:
  KUBECTL_VERSION: "1.28.0"
  
# Development monitoring
monitor_development:
  image: python:3.9-slim
  stage: monitor
  before_script:
    # Install dependencies
    - apt-get update -qq && apt-get install -y -qq curl
    - pip3 install pyyaml
    
    # Install kubectl
    - curl -LO "https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
    - chmod +x kubectl && mv kubectl /usr/local/bin/
    
    # Setup kubeconfig from template
    - mkdir -p ~/.kube
    - sed "s/_DEV_SERVER_URL/${DEV_K8S_SERVER_URL}/g; s/DEV_USERNAME/${DEV_K8S_USERNAME}/g; s/DEV_PASSWORD_/${DEV_K8S_PASSWORD}/g" kubeconfig-development.yaml > ~/.kube/config
    
    # Test connection
    - kubectl cluster-info
    - echo "‚úÖ Connected to DEVELOPMENT cluster"
    
    # Create monitoring output directory
    - mkdir -p monitoring-output
    - echo "üìÅ Created monitoring-output directory for artifacts"
  
  script:
    - echo "üöß Monitoring DEVELOPMENT namespace..."
    - echo "üîç Threshold set to ${DEV_THRESHOLD:-3} restarts"
    - python3 pod_restart_monitor.py --namespaces development --threshold ${DEV_THRESHOLD:-3}
    - echo "üìä Development monitoring completed"
    
    # Show what files were created
    - echo "üìÇ Generated files:"
    - ls -la monitoring-output/ || echo "No monitoring-output directory found"
  
  artifacts:
    when: always
    paths:
      - "monitoring-output/"
    reports:
      junit: "monitoring-output/junit-report.xml"  # Optional: if you want to add JUnit reporting
    expire_in: 1 week
  
  # Allow failure so pipeline doesn't stop if there are restart alerts
  allow_failure: true
  
  only:
    variables:
      - $MONITOR_DEVELOPMENT

# Production monitoring
monitor_production:
  image: python:3.9-slim
  stage: monitor
  before_script:
    # Install dependencies
    - apt-get update -qq && apt-get install -y -qq curl
    - pip3 install pyyaml
    
    # Install kubectl
    - curl -LO "https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
    - chmod +x kubectl && mv kubectl /usr/local/bin/
    
    # Setup kubeconfig from template
    - mkdir -p ~/.kube
    - sed "s/_PROD_SERVER_URL/${PROD_K8S_SERVER_URL}/g; s/PROD_USERNAME/${PROD_K8S_USERNAME}/g; s/PROD_PASSWORD_/${PROD_K8S_PASSWORD}/g" kubeconfig-production.yaml > ~/.kube/config
    
    # Test connection
    - kubectl cluster-info
    - echo "‚úÖ Connected to PRODUCTION cluster"
    
    # Create monitoring output directory
    - mkdir -p monitoring-output
    - echo "üìÅ Created monitoring-output directory for artifacts"
  
  script:
    - echo "üö® Monitoring PRODUCTION namespace..."
    - echo "üîç Threshold set to ${PROD_THRESHOLD:-1} restarts"
    - python3 pod_restart_monitor.py --namespaces production --threshold ${PROD_THRESHOLD:-1}
    - echo "üìä Production monitoring completed"
    
    # Show what files were created
    - echo "üìÇ Generated files:"
    - ls -la monitoring-output/ || echo "No monitoring-output directory found"
  
  artifacts:
    when: always
    paths:
      - "monitoring-output/"
    expire_in: 1 week
  
  # Production monitoring should fail the pipeline if there are critical alerts
  allow_failure: false
  
  only:
    variables:
      - $MONITOR_PRODUCTION

# Multi-namespace monitoring (for comprehensive checks)
monitor_all_namespaces:
  image: python:3.9-slim
  stage: monitor
  before_script:
    # Install dependencies
    - apt-get update -qq && apt-get install -y -qq curl
    - pip3 install pyyaml
    
    # Install kubectl
    - curl -LO "https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
    - chmod +x kubectl && mv kubectl /usr/local/bin/
    
    # Setup kubeconfig (use appropriate template based on target cluster)
    - mkdir -p ~/.kube
    - |
      if [ "$TARGET_CLUSTER" = "production" ]; then
        sed "s/_PROD_SERVER_URL/${PROD_K8S_SERVER_URL}/g; s/PROD_USERNAME/${PROD_K8S_USERNAME}/g; s/PROD_PASSWORD_/${PROD_K8S_PASSWORD}/g" kubeconfig-production.yaml > ~/.kube/config
        echo "üîß Using PRODUCTION cluster configuration"
      else
        sed "s/_DEV_SERVER_URL/${DEV_K8S_SERVER_URL}/g; s/DEV_USERNAME/${DEV_K8S_USERNAME}/g; s/DEV_PASSWORD_/${DEV_K8S_PASSWORD}/g" kubeconfig-development.yaml > ~/.kube/config
        echo "üîß Using DEVELOPMENT cluster configuration"
      fi
    
    # Test connection
    - kubectl cluster-info
    - echo "‚úÖ Connected to ${TARGET_CLUSTER:-development} cluster"
    
    # Create monitoring output directory
    - mkdir -p monitoring-output
    - echo "üìÅ Created monitoring-output directory for artifacts"
  
  script:
    - echo "üîç Monitoring ALL specified namespaces..."
    - echo "üîç Namespaces: ${MONITOR_NAMESPACES:-default kube-system}"
    - echo "üîç Threshold set to ${MONITOR_THRESHOLD:-2} restarts"
    - python3 pod_restart_monitor.py --namespaces ${MONITOR_NAMESPACES:-default kube-system} --threshold ${MONITOR_THRESHOLD:-2}
    - echo "üìä Multi-namespace monitoring completed"
    
    # Show what files were created
    - echo "üìÇ Generated files:"
    - ls -la monitoring-output/ || echo "No monitoring-output directory found"
    
    # Create a summary report
    - |
      echo "üìã MONITORING SUMMARY" > monitoring-output/summary.txt
      echo "===================" >> monitoring-output/summary.txt
      echo "Job: ${CI_JOB_NAME}" >> monitoring-output/summary.txt
      echo "Pipeline: ${CI_PIPELINE_ID}" >> monitoring-output/summary.txt
      echo "Commit: ${CI_COMMIT_SHA}" >> monitoring-output/summary.txt
      echo "Branch: ${CI_COMMIT_REF_NAME}" >> monitoring-output/summary.txt
      echo "Target Cluster: ${TARGET_CLUSTER:-development}" >> monitoring-output/summary.txt
      echo "Namespaces: ${MONITOR_NAMESPACES:-default kube-system}" >> monitoring-output/summary.txt
      echo "Threshold: ${MONITOR_THRESHOLD:-2}" >> monitoring-output/summary.txt
      echo "Timestamp: $(date)" >> monitoring-output/summary.txt
      echo "" >> monitoring-output/summary.txt
      
      # Check if alerts were generated
      if [ -f "monitoring-output/restart_alerts.csv" ]; then
        echo "‚ö†Ô∏è  ALERTS FOUND - See restart_alerts.csv for details" >> monitoring-output/summary.txt
        echo "Alert count: $(wc -l < monitoring-output/restart_alerts.csv)" >> monitoring-output/summary.txt
      else
        echo "‚úÖ NO ALERTS - All pods are healthy" >> monitoring-output/summary.txt
      fi
  
  artifacts:
    when: always
    paths:
      - "monitoring-output/"
    expire_in: 2 weeks
  
  allow_failure: true
  
  only:
    variables:
      - $MONITOR_ALL_NAMESPACES

# Scheduled monitoring (for automated checks)
scheduled_monitoring:
  extends: monitor_all_namespaces
  
  script:
    - echo "‚è∞ Running scheduled monitoring..."
    - echo "üîç Namespaces: ${SCHEDULED_NAMESPACES:-default kube-system production}"
    - echo "üîç Threshold set to ${SCHEDULED_THRESHOLD:-1} restarts"
    - python3 pod_restart_monitor.py --namespaces ${SCHEDULED_NAMESPACES:-default kube-system production} --threshold ${SCHEDULED_THRESHOLD:-1} --quiet
    - echo "üìä Scheduled monitoring completed"
    
    # Show what files were created
    - echo "üìÇ Generated files:"
    - ls -la monitoring-output/ || echo "No monitoring-output directory found"
    
    # Send notification if alerts found (you can integrate with Slack, email, etc.)
    - |
      if [ -f "monitoring-output/restart_alerts.csv" ]; then
        echo "üö® ALERTS DETECTED in scheduled monitoring!"
        echo "Alert details available in artifacts"
        # Add your notification logic here (Slack webhook, email, etc.)
      fi
  
  # Only run on schedule or manual trigger
  only:
    - schedules
    - web
  
  allow_failure: false  # Scheduled monitoring should alert on issues